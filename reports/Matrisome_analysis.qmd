---
title: "ECM related Gene Expression ZERO and Jabado"
toc: true
format:
  html:
    code-fold: false
    code-tools: true
    self-contained: true
execute: 
  output: false
  error: false
  warning: false
  echo: false
project:
  execute-dir: project
---


```{r, setup, include=FALSE}
library(knitr)
library(tidyverse)
library(readr)
library(here)
library(MatrisomeAnalyzeR)
library(ComplexHeatmap)
library(edgeR)
library(ggpubr)

#opts_knit$set(root.dir = "C:/Users/pgraber/OneDrive - Childrens Cancer Institute/Documents/workspace/Aim1_Characterization_trumouroids")
```


```{r}
TPM_counts <- read_tsv(here("data/ZERO_RNAseq/CNS_GeneExpression_TPM_Counts_total.txt"))

patient_metadata <- read_tsv(here("data/ZERO_RNAseq/CNS_PatientDiagnosis.txt"))

```


```{r}
head(TPM_counts) 
head(patient_metadata)
```

```{r}
# FIlter data to only include HGG and DMG
unique(patient_metadata$diagnosis)

glioma_filter <- c("HGG", "DMG")

glioma_subset <- patient_metadata[patient_metadata$diagnosis %in% glioma_filter, ]

```

```{r}
# Get unique patient IDs from the glioma subset and filter TPM matrix with unique patient IDs

# Get unique patient IDs from the glioma subset
unique_patient_ID <- unique(glioma_subset$rnaseq_id)

# Create a vector of column names to keep
columns_to_keep <- c("gene_id", "transcript_id-s-", unique_patient_ID)

# Check which column names exist in the TPM_counts dataframe
existing_columns <- colnames(TPM_counts)

# Filter the columns to keep only the ones that exist in TPM_counts
valid_columns <- columns_to_keep[columns_to_keep %in% existing_columns]

# Filter the TPM_counts dataframe based on valid columns
filtered_TPM_counts <- TPM_counts[, valid_columns, drop = FALSE]

```


```{r}
# Annotate genes with MatrisomAnalyseR package

TPM_ECM_annotated <- matriannotate(data = as.data.frame(filtered_TPM_counts), gene.column = "gene_id", species = "human")
matriring(TPM_ECM_annotated)
```

```{r}
# Count occurrences of each Matrisome Category and arrange by count
category_counts <- matrisome %>%
  group_by(`Annotated Matrisome Category`, `Annotated Matrisome Division`) %>%
  summarise(Count = n()) %>%
  arrange(`Annotated Matrisome Division`, (Count)) %>%
  mutate(`Annotated Matrisome Category` = factor(`Annotated Matrisome Category`, levels = unique(.$`Annotated Matrisome Category`)))

matrisome_cleveland_dotplot <- ggplot(category_counts, aes(x = Count, y = `Annotated Matrisome Category`, fill = `Annotated Matrisome Division`)) +
  geom_segment(
    aes(x = 0, xend = Count, y = `Annotated Matrisome Category`, yend = `Annotated Matrisome Category`), 
    color = "black", 
    alpha = 1
  ) +
  geom_dotplot(
    binaxis = "y", 
    stackdir = "center", 
    position = "dodge", 
    dotsize = 1.5, 
    color = "black"
  ) +
  geom_text(
    aes(label = Count), 
    vjust = -1,
    hjust = -0.3,
    size = 5, 
    color = "black", 
    show.legend = FALSE
  ) +
  labs(
    title = "Distribution of Matrisome Category", 
    x = "Counts", 
    y = "Matrisome Category", 
    fill = "Matrisome Division"
  ) + expand_limits(x = c(0, max(category_counts$Count) * 1.22)) +  # Extend x-axis limits
  theme_minimal() +
  theme(
    axis.text.y = element_text(size = 16),
    axis.text.x = element_text(size = 16),
    legend.position = "right", 
    panel.grid.major.y = element_line(color = "grey", linetype = "dashed"), 
    panel.grid.minor.y = element_blank(), 
    legend.title = element_text(size = 14), 
    legend.text = element_text(size = 12)
  )

# Explicitly set the order of layers
matrisome_cleveland_dotplot


```

```{r}
# Select only Core matrisome genes
core_matrisome <- TPM_ECM_annotated %>%
  filter(`Annotated Matrisome Division` == "Core matrisome")

matribar(core_matrisome)
matriring(core_matrisome)


```

```{r}
# Create a matrix excluding the first 4 columns and the first row
expression_matrix <- as.matrix(core_matrisome[, -c(1:4)])

# Keep the gene names as row names
gene_names <- core_matrisome$`Annotated Gene`
rownames(expression_matrix) <- gene_names
```

```{r}
# Filter genes based on TPM values 
threshold <- 1  
keep <- rowSums(expression_matrix > threshold) >= (0.5 * ncol(expression_matrix) + 1)
filtered_expression_matrix <- expression_matrix[keep, ]
```

```{r}

filtered_expression_matrix[filtered_expression_matrix==0] <- 0.001

log_matrix <- log(filtered_expression_matrix)

log_scale <- scale(log_matrix)
```

```{r}
heatmap_obj <- Heatmap(
  log_scale,
  name = "Expression",
  show_row_names = TRUE,
  show_column_names = FALSE,
  column_title = "Samples",
  row_title = "Genes",
  cluster_rows = TRUE,
  cluster_columns = TRUE,
  column_title_side = "bottom",
  row_dend_side = "left",
  column_dend_side = "top",
  width = unit(10, "cm"),
  height = unit(10, "cm")
)

draw(heatmap_obj)

```


```{r}
# Identify top and bottom expressed genes
top_genes <- head(rownames(log_matrix)[order(rowMeans(log_matrix, na.rm = TRUE), decreasing = TRUE)], 30)
bottom_genes <- head(rownames(log_matrix)[order(rowMeans(log_matrix, na.rm = TRUE), decreasing = FALSE)], 30)

# Subset the log_matrix to include only top and bottom genes
selected_genes <- c(top_genes, bottom_genes)
filtered_scaled_matrix <- log_scale[selected_genes, ]

# Set row names to gene names
rownames(filtered_scaled_matrix) <- selected_genes

# Create a Heatmap object
heatmap_obj <- Heatmap(
  filtered_scaled_matrix,  
  name = "z-scores",  
  # col = colorRamp2(c(-2, 0, 2), colors = c("blue", "white", "red")),  # Define colors
  show_row_names = TRUE,  
  show_column_names = FALSE,  
  cluster_rows = TRUE,  
  cluster_columns = TRUE,  
  column_title_side = "bottom",  
  row_dend_side = "left",  
  column_dend_side = "top", 
  width = unit(10, "cm"),  
  height = unit(10, "cm")  
)

# Draw the heatmap
draw(heatmap_obj)

```



